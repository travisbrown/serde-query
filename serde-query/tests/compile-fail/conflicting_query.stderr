error: Conflicting query at '.foo'. The query for field 'field_access' expects a struct while the query for field 'index_access' expects a sequence.
 --> tests/compile-fail/conflicting_query.rs:4:5
  |
4 |     field_access: String,
  |     ^^^^^^^^^^^^

error: Conflicting query at '.foo'. The query for field 'expect_value' expects a value here while the query for field 'expect_struct' expects a struct.
  --> tests/compile-fail/conflicting_query.rs:12:5
   |
12 |     expect_value: String,
   |     ^^^^^^^^^^^^

error[E0277]: the trait bound `A: serde::Deserialize<'de>` is not satisfied
  --> tests/compile-fail/conflicting_query.rs:21:26
   |
21 |     assert_deserialize::<A>();
   |                          ^ the trait `Deserialize<'_>` is not implemented for `A`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `A` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `Deserialize<'de>`:
             &'a Path
             &'a [u8]
             &'a str
             ()
             (T,)
             (T0, T1)
             (T0, T1, T2)
             (T0, T1, T2, T3)
           and $N others
note: required by a bound in `assert_deserialize`
  --> tests/compile-fail/conflicting_query.rs:17:31
   |
17 | fn assert_deserialize<'de, D: serde::Deserialize<'de>>() {}
   |                               ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `assert_deserialize`

error[E0277]: the trait bound `B: serde::Deserialize<'de>` is not satisfied
  --> tests/compile-fail/conflicting_query.rs:22:26
   |
22 |     assert_deserialize::<B>();
   |                          ^ the trait `Deserialize<'_>` is not implemented for `B`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `B` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `Deserialize<'de>`:
             &'a Path
             &'a [u8]
             &'a str
             ()
             (T,)
             (T0, T1)
             (T0, T1, T2)
             (T0, T1, T2, T3)
           and $N others
note: required by a bound in `assert_deserialize`
  --> tests/compile-fail/conflicting_query.rs:17:31
   |
17 | fn assert_deserialize<'de, D: serde::Deserialize<'de>>() {}
   |                               ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `assert_deserialize`
